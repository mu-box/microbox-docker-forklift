#!/bin/bash

# extract the image as a tar stream from stdin
extract_stdin() {
  mkdir -p /var/tmp/${BUILD_ID}
  tar -C /var/tmp/${BUILD_ID} -xf -
}

# extract the archive on warehouse from the previous push
extract_archive() {
  curl \
    -k \
    -f \
    -s \
    -o /dev/null \
    -H "X-Auth-Token: ${WAREHOUSE_TOKEN}" \
    -d "{\"old-id\": \"${PREVIOUS_BUILD_ID}.tgz\", \"new-id\": \"${BUILD_ID}.tgz\"}" \
    "https://${WAREHOUSE_IP}:1566/stages"
}

# generate a temporary ssh key for the rsync process
create_ssh_key() {
  if [[ ! -f /var/tmp/id_rsa ]]
  then
    ssh-keygen -t rsa -q -N "" -f /var/tmp/id_rsa > /dev/null
  fi
}

# docker doesn't update the timestamps, so we need to
update_timestamps() {
  if [[ -f /var/tmp/${BUILD_ID}/manifest.json ]]
  then
    touch /var/tmp/${BUILD_ID}/manifest.json
  fi

  if [[ -f /var/tmp/${BUILD_ID}/repositories ]]
  then
    touch /var/tmp/${BUILD_ID}/repositories
  fi
}

# sync_image() {
#   rsync \
#     -a \
#     --delete \
#     --info=progress2 \
#     -e 'ssh -p 1567 -i /var/tmp/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
#     /var/tmp/${BUILD_ID}/ \
#     ${BUILD_ID}.tgz@${WAREHOUSE_IP}:${BUILD_ID}.tgz \
#     2> /dev/null \
#   | stdbuf -i0 -o0 tr $'\r' $'\n' \
#   | awk '{printf "\rSyncing image: %s - %s",$2,$3}'
#   echo
# }

sync_image() {
  rsync \
    -a \
    --delete \
    --info=progress2 \
    -e 'ssh -p 1567 -i /var/tmp/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
    /var/tmp/${BUILD_ID}/ \
    ${BUILD_ID}.tgz@${WAREHOUSE_IP}:${BUILD_ID}.tgz \
    2> /dev/null \
  | stdbuf -i0 -o0 \
    perl -e '$/ = "\r"; $| = 1; while(<STDIN>){/.* (\d+%)   (.*\/s).*/;print "\rSyncing image: $1 - $2";}'
  echo -e '\r\033[KSyncing image...'
}



commit_archive() {
  curl \
    -k \
    -f \
    -s \
    -o /dev/null \
    -H "X-Auth-Token: ${WAREHOUSE_TOKEN}" \
    -X PUT \
    "https://${WAREHOUSE_IP}:1566/stages/${BUILD_ID}.tgz"
}

gzip_image() {
  if [[ -n "$IMAGE_SIZE" ]]; then
    (pv --progress --force --size $IMAGE_SIZE - | gzip > /var/tmp/${BUILD_ID}.tgz) 2>&1 \
    | stdbuf -i0 -o0 \
      perl -e '$/ = "\r"; $| = 1; while(<STDIN>){/\[(.*)\](.*%)/; my $progress = $1; $progress =~ tr/=/#/; $progress =~ tr/>/ /; print "\r$progress$2";}' && \
      echo && echo
  else
    gzip > /var/tmp/${BUILD_ID}.tgz
  fi
}

upload_image() {
  curl \
    -k \
    -f \
    --progress-bar \
    -o /dev/null \
    -H "X-Auth-Token: ${WAREHOUSE_TOKEN}" \
    -H "Transfer-Encoding: chunked" \
    --data-binary @/var/tmp/${BUILD_ID}.tgz \
    "https://${WAREHOUSE_IP}:7410/blobs/${BUILD_ID}.tgz"
}

fetch_image() {
  curl \
    -k \
    -f \
    -H "X-Auth-Token: ${WAREHOUSE_TOKEN}" \
    https://${WAREHOUSE_IP}:7410/blobs/${BUILD_ID}.tgz \
  | gunzip --stdout
}

usage() {
  cat <<-END
The forklift project has two executables: lift and drop.

lift - upload a docker image to the warehouse

drop - retrieve a docker image from the warehouse

example usage:

docker run --rm -i mubox/forklift drop archive=1234 token=abcd host=1.2.3.4 | docker import

docker export ubuntu | docker run --rm -i mubox/forklift lift archive=1234 token=abcd host=1.2.3.4

docker export ubuntu | docker run --rm -i mubox/forklift lift archive=1234 previous=2345 token=abcd host=1.2.3.4
END
}
